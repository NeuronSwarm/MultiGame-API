// Generated by CoffeeScript 1.10.0
(function() {
  var BinaryFile, Schema, mongoose, passportLocalMongoose;
  var async = require('async');
  var fs = require('fs');

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  passportLocalMongoose = require('passport-local-mongoose');

  BinaryFile = new Schema({
    path: String,
    map_name: String,
    permission_level_id: Number,
    user_id: Number,
    created_at: Date,
    updated_at: Date,
    permission: String,
    guest: {type: Boolean, default: false}
  });
  BinaryFile.methods.setPermissionLevel = function(level, callback){
    if(level == 'private'){
      this.permission_level_id = 1;
    } else if(level == 'protected'){
      this.permission_level_id = 2;
    } else if(level == 'public'){
      this.permission_level_id = 3;
    } else {
      console.error('not a valid permission level');
      throw 'not a valid permission level';
    }
    this.save(callback);
  }

  BinaryFile.methods.getPermissionLevel = function(){
    if(this.permission_level_id == 1){
      return 'private'
    } else if(this.permission_level_id == 2){
      return 'protected'
    } else if(this.permission_level_id == 3){
      return 'public'
    } else {
      console.error(`${this.map_name} does not have a permission level`);
    }
  }

  BinaryFile.statics.customRemove = function(m_map_name, cb){
    self = this;
    console.log("map name: " + m_map_name);
    self.findOne({map_name: m_map_name}, function(err, map){
      console.log("map: " + map);
      if(map){
        _map_path = map.path
        map.remove(function(err){
          if(err){
            status = 400
            return cb(err, status);
          }
          else {
            status = 200
            self.remove({map_name: `${m_map_name}Terrain`}, function(err){
              if(err)
                return cb(`Failed to delete Terrain for ${m_map_name}`, 400);
              else{
                fs.unlinkSync(_map_path);
                fs.unlinkSync(`${_map_path}Terrain`);
                return cb(`${m_map_name} deleted successfully`, status);
              }

            });
          }
        });
      }
      else
        return cb(`${m_map_name} does not exist`, 400);
    })
  }

  // BinaryFile.pre('remove', function(next){
  //   console.log(this);
  //   this.remove({map_name: `${this.map_name}Terrain`}, next);
  // })

  BinaryFile.statics.getPermissionID = function(permissionString){
    if(permissionString == 'private')
      return 1;
    if(permissionString == 'protected')
      return 2;
    if(permissionString == 'public')
      return 3;
    return 0;
  }

  // BinaryFile.plugin(passportLocalMongoose);

  module.exports = mongoose.model('BinaryFile', BinaryFile);

}).call(this);
