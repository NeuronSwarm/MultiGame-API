// Generated by CoffeeScript 1.10.0
(function() {
  var Account, BinaryFile, express, formidable, fs, passport, path, router;

  express = require('express');

  passport = require('passport');

  util = require('util');

  formidable = require('formidable');

  Account = require('../models/account');

  BinaryFile = require('../models/binary_file');

  mongoose = require('mongoose')
  var Schema   = mongoose.Schema;
  var ObjectIdSchema = Schema.ObjectId;
  var ObjectId = mongoose.Types.ObjectId;

  fs = require('fs');

  path = require('path');

  router = express.Router();

  router.get('/', function(req, res) {
    return res.render('index', {
      user: req.user
    });
  });

  router.get('/register', function(req, res) {
    return res.render('register', {});
  });

  getIncrementedId = function(){
    return Account.findOne().sort({created_at: -1}).exec(function(err, account) {
      if(err){
        console.log(err);
        return 1;
      }
      if(account){
        if(account.id)
          return 1 + account.id;
      }
      else
        return 1;
    });
  }
  router.get('/drop', function(req,res){
    mongoose.connection.db.dropCollection('accounts', function(err, result) {
      if(err)
        return console.log(err);
      res.send('deleted');
    });

  });

  function dropCollection (modelName) {
    if (!modelName || !modelName.length) {
      Promise.reject(new Error('You must provide the name of a model.'));
    }

    try {
      var model = mongoose.model(modelName);
      var collection = mongoose.connection.collections[model.collection.collectionName];
    } catch (err) {
      return Promise.reject(err);
    }

    return new Promise(function (resolve, reject) {
      collection.drop(function (err) {
        if (err) {
          reject(err);
          return;
        }

        // Remove mongoose's internal records of this
        // temp. model and the schema associated with it
        delete mongoose.models[modelName];
        delete mongoose.modelSchemas[modelName];
      
        resolve();
      });
    });
  }
  router.get('/real_drop', function(req,res){
    dropCollection('accounts');
    res.send('good to go');
  });
  router.post('/register', function(req, res, next) {
    return Account.register(new Account({
      username: req.body.username,
      created_at: new Date
    }), req.body.password, function(err, account) {
      if (err) {
        return res.render('register', {
          error: err.message
        });
      }
      return passport.authenticate('local')(req, res, function() {
        return req.session.save(function(err) {
          if (err) {
            return next(err);
          }
          return res.redirect('/');
        });
      });
    });
  });

  // why does this work?
  router.get('/login', function(req, res) {
    return res.render('login', {
      user: req.user,
      error: req.flash('error')
    });
  });

  router.post('/login', passport.authenticate('local', {
    failureRedirect: '/login',
    failureFlash: true
  }), function(req, res, next) {
    return req.session.save(function(err) {
      if (err) {
        return next(err);
      }
      return res.redirect('/');
    });
  });

  router.get('/logout', function(req, res, next) {
    req.logout();
    return req.session.save(function(err) {
      if (err) {
        return next(err);
      }
      return res.redirect('/');
    });
  });

  // saves file on server side
  execBinary = function(req,res){
    BinaryFile.findOne({'_id': ObjectId("586abc7365a453f63f9d15a9")}, function(err, data){
      if(err)
        return res.render(err);
      else
        wstream = fs.createWriteStream('myoutput1', { encoding: 'binary' });
        wstream.on('data', (chunk) => {
          console.log(`Received ${chunk.length} bytes of data.`);
        });
        console.log('attempting to write file');
        wstream.write(new Buffer(data.binary), function(err){
          if(err){
            throw err;
          }
          console.log('file written!')
        });
        wstream.end();
        return
    });
  }
  // sends file to client
  clientBinary = function(req,res){
    // if(!req.user)
    // return res.status('401').send('you must sign in first');
    BinaryFile.findOne({'_id': ObjectId("586abc7365a453f63f9d15a9")}, function(err, data){
      if(err)
        return res.render(err);
      else
        res.setHeader('Content-Description','File Transfer');
        res.setHeader('Content-Disposition', 'attachment; filename=binary');
        res.setHeader('Content-Type', 'application/octet-stream');
        res.status('200').end(data.binary);
    });
  }
  router.get('/binary',
    clientBinary
  );

  router.get('/', function(req, res) {
    return res.render('index', {
      user: req.user
    });
  });
  router.get('redis', function(req, res){
    client
    server.open(function(err){
      if(err == null){
        // do some stuff
        return res.render('connected')
      }
    })
  });
  
  router.get('/upload', function(req, res) {
    return res.render('upload');
  });

  router.get('/ping', function(req, res) {
    var file, http, request;
    console.log(__dirname);
    BinaryFile.remove(function(err) {
      var b;
      if (err) {
        throw err;
      }
      return b = new BinaryFile;
    });
    console.log('Starting');
    http = require('http');
    file = fs.createWriteStream("./write.jpg");
    request = http.get("localhost:3000/binary", function(response) {
      return response.pipe(file);
    });
    fs.exists('./sample.jpg', function(fileok) {
      console.log(fileok);
      if (fileok) {
        fs.readFile('./sample.jpg', function(error, data) {
          var b;
          b = new BinaryFile;
          b.binary = data;
          return b.save;
        });
      } else {
        console.log('file not found');
      }
    });
    console.log('Carry on executing');
    return res.status(200).send('finished');
  });

  router.post('/upload', function(req, res) {

    // if(!req.user){
    //   console.error('you must be a user');
    //   return res.status('401').send('you must be a user');
    // }

    // body parser, param sent from POSTman
    var token = req.body.token;
    console.log(token);

    var form;
    form = new formidable.IncomingForm({noFileSystem: true}),
      files = [],
      fields = []; 
    form.multiples = true;
    form.uploadDir = path.join(__dirname, '/../public/uploads');
    form
      .on('field', function(field, buffer) {
        console.log('on field');
        fields.push([field, buffer]);
      })
      .on('file', function(field, file) {
        console.log('on file');
        files.push([field,file]);
      })
      .on('error', function(err) {
        return console.log('An error has occured: \n' + err);
      })
      .on('end', function(){
        console.log('-> upload done');
        mongoose.set('debug', false);

        b = new BinaryFile;
        b._id = new ObjectId();
        b.user_id = req.user.id;
        b.created_at = new Date();
        if(req.body.map_id)
          b.map_id = req.body.map_id
        
        b.binary = files[0][1];
        return b.save(function(err) {
          if (err) {
            return console.error('b failed: ' + err.errmsg);
          }
          res.writeHead(200, {'content-type': 'text/plain'});
          res.write('\n\n');
          res.end('file received:\n\n ');
        });
      });
      form.parse(req);
  });
  module.exports = router;

}).call(this);
